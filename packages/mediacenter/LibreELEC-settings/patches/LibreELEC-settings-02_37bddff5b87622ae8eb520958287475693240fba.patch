diff --git a/src/oe.py b/src/oe.py
index 8b9fa9d..9b34462 100644
--- a/src/oe.py
+++ b/src/oe.py
@@ -852,15 +852,15 @@ def reboot_counter(seconds=10, title=' '):
     reboot_dlg.create('LibreELEC %s' % title, ' ')
     reboot_dlg.update(0)
     wait_time = seconds
-    while seconds >= 0 and not reboot_dlg.iscanceled():
+    while seconds >= 0 and not (reboot_dlg.iscanceled() or xbmcm.abortRequested()):
         progress = round(1.0 * seconds / wait_time * 100)
         reboot_dlg.update(int(progress), _(32329) % seconds)
-        time.sleep(1)
+        xbmcm.waitForAbort(1)
         seconds = seconds - 1
-    if not reboot_dlg.iscanceled():
-        return 1
-    else:
+    if reboot_dlg.iscanceled() or xbmcm.abortRequested():
         return 0
+    else:
+        return 1
 
 
 def exit():
diff --git a/src/resources/lib/modules/bluetooth.py b/src/resources/lib/modules/bluetooth.py
index 6431f98..38f3183 100644
--- a/src/resources/lib/modules/bluetooth.py
+++ b/src/resources/lib/modules/bluetooth.py
@@ -1135,7 +1135,7 @@ def run(self):
                     self.last_run = current_time
                 if self.main_menu.getSelectedItem().getProperty('modul') != 'bluetooth':
                     self.stop()
-                time.sleep(1)
+                self.oe.xbmcm.waitForAbort(1)
             self.oe.dbg_log('bluetooth::discoveryThread::run', 'exit_function', 0)
         except Exception as e:
             self.oe.dbg_log('bluetooth::discoveryThread::run', 'ERROR: (' + repr(e) + ')', 4)
@@ -1172,7 +1172,7 @@ def run(self):
                     self.stopped = True
                     self.parent.close_pinkey_window()
                 else:
-                    time.sleep(1)
+                    self.oe.xbmcm.waitForAbort(1)
             self.oe.dbg_log('bluetooth::pinkeyTimer::run', 'exit_function', 0)
         except Exception as e:
             self.oe.dbg_log('bluetooth::pinkeyTimer::run', 'ERROR: (' + repr(e) + ')', 4)
diff --git a/src/resources/lib/modules/connman.py b/src/resources/lib/modules/connman.py
index 52bca50..188ae64 100644
--- a/src/resources/lib/modules/connman.py
+++ b/src/resources/lib/modules/connman.py
@@ -1164,7 +1164,7 @@ def set_technologie(self, **kwargs):
                                 self.Technology.SetProperty('Powered', dbus.Boolean(True, variant_level=1))
                             if settings['Tethering']['value'] == '1' and dbus.String(settings['TetheringIdentifier']['value']) != '' \
                                 and dbus.String(settings['TetheringPassphrase']['value']) != '':
-                                time.sleep(5)
+                                self.oe.xbmcm.waitForAbort(5)
                                 self.Technology.SetProperty('TetheringIdentifier', dbus.String(settings['TetheringIdentifier']['value'],
                                                             variant_level=1))
                                 self.Technology.SetProperty('TetheringPassphrase', dbus.String(settings['TetheringPassphrase']['value'],
@@ -1277,7 +1277,7 @@ def dbus_error_handler(self, error):
                     if self.connect_attempt == 1:
                         self.log_error = 0
                         self.notify_error = 0
-                        time.sleep(5)
+                        self.oe.xbmcm.waitForAbort(5)
                         self.connect_network()
                     else:
                         self.log_error = 1
diff --git a/src/resources/lib/modules/system.py b/src/resources/lib/modules/system.py
index 3bfbb8d..1d16352 100644
--- a/src/resources/lib/modules/system.py
+++ b/src/resources/lib/modules/system.py
@@ -481,7 +481,7 @@ def reset_xbmc(self, listItem=None):
                 reset_file.write('reset')
                 reset_file.close()
                 self.oe.winOeMain.close()
-                time.sleep(1)
+                self.oe.xbmcm.waitForAbort(1)
                 xbmc.executebuiltin('Reboot')
             self.oe.set_busy(0)
             self.oe.dbg_log('system::reset_xbmc', 'exit_function', 0)
@@ -498,7 +498,7 @@ def reset_oe(self, listItem=None):
                 reset_file.write('reset')
                 reset_file.close()
                 self.oe.winOeMain.close()
-                time.sleep(1)
+                self.oe.xbmcm.waitForAbort(1)
                 xbmc.executebuiltin('Reboot')
                 self.oe.set_busy(0)
             self.oe.dbg_log('system::reset_oe', 'exit_function', 0)
@@ -619,7 +619,7 @@ def do_restore(self, listItem=None):
                 if answer == 1:
                     if self.oe.reboot_counter(10, self.oe._(32371)) == 1:
                         self.oe.winOeMain.close()
-                        time.sleep(1)
+                        self.oe.xbmcm.waitForAbort(1)
                         xbmc.executebuiltin('Reboot')
                 else:
                     self.oe.dbg_log('system::do_restore', 'User Abort!', 0)
diff --git a/src/resources/lib/modules/updates.py b/src/resources/lib/modules/updates.py
index c7765ad..1f86095 100644
--- a/src/resources/lib/modules/updates.py
+++ b/src/resources/lib/modules/updates.py
@@ -588,7 +588,7 @@ def do_autoupdate(self, listItem=None, silent=False):
                     subprocess.call('sync', shell=True, stdin=None, stdout=None, stderr=None)
                     if silent == False:
                         self.oe.winOeMain.close()
-                        time.sleep(1)
+                        self.oe.xbmcm.waitForAbort(1)
                         xbmc.executebuiltin('Reboot')
                 else:
                     delattr(self, 'update_in_progress')
diff --git a/src/resources/lib/oeWindows.py b/src/resources/lib/oeWindows.py
index 38c9f52..542be8b 100644
--- a/src/resources/lib/oeWindows.py
+++ b/src/resources/lib/oeWindows.py
@@ -655,7 +655,7 @@ def onClick(self, controlID):
 
             if controlID == 1500:
                 self.getControl(1390).setLabel('1')
-                time.sleep(0.5)
+                self.oe.xbmcm.waitForAbort(0.5)
                 self.is_last_wizard = True
                 self.getControl(1391).setLabel('')
                 self.getControl(self.buttons[3]['id']).setVisible(False)
@@ -693,7 +693,7 @@ def onClick(self, controlID):
                     xbmc.executebuiltin('UpdateAddonRepos')
                     langAddon = "InstallAddon(" + lang_new + ")"
                     xbmc.executebuiltin(langAddon)
-                    time.sleep(.5)
+                    self.oe.xbmcm.waitForAbort(0.5)
                     xbmc.executebuiltin('SendClick(10100,11)')
                     self.oe.write_setting('libreelec', 'wizard_completed', 'True')
                     self.visible = False

